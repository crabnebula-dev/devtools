// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "tauri.proto" (package "rs.devtools.tauri", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message rs.devtools.tauri.ConfigRequest
 */
export interface ConfigRequest {
}
/**
 * @generated from protobuf message rs.devtools.tauri.MetricsRequest
 */
export interface MetricsRequest {
}
/**
 * @generated from protobuf message rs.devtools.tauri.Config
 */
export interface Config {
    /**
     * / The raw JSON string of the configuration
     *
     * @generated from protobuf field: string raw = 1;
     */
    raw: string;
}
/**
 * @generated from protobuf message rs.devtools.tauri.Metrics
 */
export interface Metrics {
    /**
     * / Tauri application initialization time
     *
     * @generated from protobuf field: google.protobuf.Timestamp initialized_at = 1;
     */
    initializedAt?: Timestamp;
    /**
     * / Tauri application reported `AppReady` time
     *
     * @generated from protobuf field: google.protobuf.Timestamp ready_at = 2;
     */
    readyAt?: Timestamp;
}
// @generated message type with reflection information, may provide speed optimized methods
class ConfigRequest$Type extends MessageType<ConfigRequest> {
    constructor() {
        super("rs.devtools.tauri.ConfigRequest", []);
    }
    create(value?: PartialMessage<ConfigRequest>): ConfigRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConfigRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConfigRequest): ConfigRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ConfigRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rs.devtools.tauri.ConfigRequest
 */
export const ConfigRequest = new ConfigRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MetricsRequest$Type extends MessageType<MetricsRequest> {
    constructor() {
        super("rs.devtools.tauri.MetricsRequest", []);
    }
    create(value?: PartialMessage<MetricsRequest>): MetricsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MetricsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetricsRequest): MetricsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MetricsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rs.devtools.tauri.MetricsRequest
 */
export const MetricsRequest = new MetricsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Config$Type extends MessageType<Config> {
    constructor() {
        super("rs.devtools.tauri.Config", [
            { no: 1, name: "raw", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Config>): Config {
        const message = { raw: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Config>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Config): Config {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string raw */ 1:
                    message.raw = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Config, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string raw = 1; */
        if (message.raw !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.raw);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rs.devtools.tauri.Config
 */
export const Config = new Config$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Metrics$Type extends MessageType<Metrics> {
    constructor() {
        super("rs.devtools.tauri.Metrics", [
            { no: 1, name: "initialized_at", kind: "message", T: () => Timestamp },
            { no: 2, name: "ready_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Metrics>): Metrics {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Metrics>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Metrics): Metrics {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp initialized_at */ 1:
                    message.initializedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.initializedAt);
                    break;
                case /* google.protobuf.Timestamp ready_at */ 2:
                    message.readyAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.readyAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Metrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp initialized_at = 1; */
        if (message.initializedAt)
            Timestamp.internalBinaryWrite(message.initializedAt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp ready_at = 2; */
        if (message.readyAt)
            Timestamp.internalBinaryWrite(message.readyAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message rs.devtools.tauri.Metrics
 */
export const Metrics = new Metrics$Type();
/**
 * @generated ServiceType for protobuf service rs.devtools.tauri.Tauri
 */
export const Tauri = new ServiceType("rs.devtools.tauri.Tauri", [
    { name: "GetConfig", options: {}, I: ConfigRequest, O: Config },
    { name: "GetMetrics", options: {}, I: MetricsRequest, O: Metrics }
]);
