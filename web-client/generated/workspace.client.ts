// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "workspace.proto" (package "rs.devtools.workspace", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Workspace } from "./workspace";
import type { Chunk } from "./workspace";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Entry } from "./workspace";
import type { EntryRequest } from "./workspace";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service rs.devtools.workspace.Workspace
 */
export interface IWorkspaceClient {
    /**
     * List entries of a directory in the workspace
     *
     * @generated from protobuf rpc: ListEntries(rs.devtools.workspace.EntryRequest) returns (stream rs.devtools.workspace.Entry);
     */
    listEntries(input: EntryRequest, options?: RpcOptions): ServerStreamingCall<EntryRequest, Entry>;
    /**
     * @generated from protobuf rpc: GetEntryBytes(rs.devtools.workspace.EntryRequest) returns (stream rs.devtools.workspace.Chunk);
     */
    getEntryBytes(input: EntryRequest, options?: RpcOptions): ServerStreamingCall<EntryRequest, Chunk>;
}
/**
 * @generated from protobuf service rs.devtools.workspace.Workspace
 */
export class WorkspaceClient implements IWorkspaceClient, ServiceInfo {
    typeName = Workspace.typeName;
    methods = Workspace.methods;
    options = Workspace.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * List entries of a directory in the workspace
     *
     * @generated from protobuf rpc: ListEntries(rs.devtools.workspace.EntryRequest) returns (stream rs.devtools.workspace.Entry);
     */
    listEntries(input: EntryRequest, options?: RpcOptions): ServerStreamingCall<EntryRequest, Entry> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<EntryRequest, Entry>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetEntryBytes(rs.devtools.workspace.EntryRequest) returns (stream rs.devtools.workspace.Chunk);
     */
    getEntryBytes(input: EntryRequest, options?: RpcOptions): ServerStreamingCall<EntryRequest, Chunk> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<EntryRequest, Chunk>("serverStreaming", this._transport, method, opt, input);
    }
}
